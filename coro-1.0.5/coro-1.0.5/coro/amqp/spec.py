# -*- Mode: Python -*-

# generated by util/codegen.py from amqp-rabbitmq-0.9.1.json
from wire import *

FRAME_METHOD = 1
FRAME_HEADER = 2
FRAME_BODY = 3
FRAME_HEARTBEAT = 8
FRAME_MIN_SIZE = 4096
FRAME_END = 206
REPLY_SUCCESS = 200
CONTENT_TOO_LARGE = 311
NO_ROUTE = 312
NO_CONSUMERS = 313
ACCESS_REFUSED = 403
NOT_FOUND = 404
RESOURCE_LOCKED = 405
PRECONDITION_FAILED = 406
CONNECTION_FORCED = 320
INVALID_PATH = 402
FRAME_ERROR = 501
SYNTAX_ERROR = 502
COMMAND_INVALID = 503
CHANNEL_ERROR = 504
UNEXPECTED_FRAME = 505
RESOURCE_ERROR = 506
NOT_ALLOWED = 530
NOT_IMPLEMENTED = 540
INTERNAL_ERROR = 541


method_map = {}
class connection (object):
    class start (object):
        _name = 'connection.start'
        id = (10, 10)
        __slots__ = ['version_major', 'version_minor', 'server_properties', 'mechanisms', 'locales']

        def __init__ (self, version_major=0, version_minor=9, server_properties=None, mechanisms='PLAIN', locales='en_US'):
            self.version_major = version_major
            self.version_minor = version_minor
            self.server_properties = server_properties
            self.mechanisms = mechanisms
            self.locales = locales

        def unpack (self, data, pos):
            self.version_major, pos = unpack_octet (data, pos)
            self.version_minor, pos = unpack_octet (data, pos)
            self.server_properties, pos = unpack_table (data, pos)
            self.mechanisms, pos = unpack_longstr (data, pos)
            self.locales, pos = unpack_longstr (data, pos)

        def pack (self):
            r = []
            r.append (pack_octet (self.version_major))
            r.append (pack_octet (self.version_minor))
            r.append (pack_table (self.server_properties))
            r.append (pack_longstr (self.mechanisms))
            r.append (pack_longstr (self.locales))
            return "".join (r)

    class start_ok (object):
        _name = 'connection.start_ok'
        id = (10, 11)
        __slots__ = ['client_properties', 'mechanism', 'response', 'locale']

        def __init__ (self, client_properties=None, mechanism='PLAIN', response=None, locale='en_US'):
            self.client_properties = client_properties
            self.mechanism = mechanism
            self.response = response
            self.locale = locale

        def unpack (self, data, pos):
            self.client_properties, pos = unpack_table (data, pos)
            self.mechanism, pos = unpack_shortstr (data, pos)
            self.response, pos = unpack_longstr (data, pos)
            self.locale, pos = unpack_shortstr (data, pos)

        def pack (self):
            r = []
            r.append (pack_table (self.client_properties))
            r.append (pack_shortstr (self.mechanism))
            r.append (pack_longstr (self.response))
            r.append (pack_shortstr (self.locale))
            return "".join (r)

    class secure (object):
        _name = 'connection.secure'
        id = (10, 20)
        __slots__ = ['challenge']

        def __init__ (self, challenge=None):
            self.challenge = challenge

        def unpack (self, data, pos):
            self.challenge, pos = unpack_longstr (data, pos)

        def pack (self):
            r = []
            r.append (pack_longstr (self.challenge))
            return "".join (r)

    class secure_ok (object):
        _name = 'connection.secure_ok'
        id = (10, 21)
        __slots__ = ['response']

        def __init__ (self, response=None):
            self.response = response

        def unpack (self, data, pos):
            self.response, pos = unpack_longstr (data, pos)

        def pack (self):
            r = []
            r.append (pack_longstr (self.response))
            return "".join (r)

    class tune (object):
        _name = 'connection.tune'
        id = (10, 30)
        __slots__ = ['channel_max', 'frame_max', 'heartbeat']

        def __init__ (self, channel_max=0, frame_max=0, heartbeat=0):
            self.channel_max = channel_max
            self.frame_max = frame_max
            self.heartbeat = heartbeat

        def unpack (self, data, pos):
            self.channel_max, pos = unpack_short (data, pos)
            self.frame_max, pos = unpack_long (data, pos)
            self.heartbeat, pos = unpack_short (data, pos)

        def pack (self):
            r = []
            r.append (pack_short (self.channel_max))
            r.append (pack_long (self.frame_max))
            r.append (pack_short (self.heartbeat))
            return "".join (r)

    class tune_ok (object):
        _name = 'connection.tune_ok'
        id = (10, 31)
        __slots__ = ['channel_max', 'frame_max', 'heartbeat']

        def __init__ (self, channel_max=0, frame_max=0, heartbeat=0):
            self.channel_max = channel_max
            self.frame_max = frame_max
            self.heartbeat = heartbeat

        def unpack (self, data, pos):
            self.channel_max, pos = unpack_short (data, pos)
            self.frame_max, pos = unpack_long (data, pos)
            self.heartbeat, pos = unpack_short (data, pos)

        def pack (self):
            r = []
            r.append (pack_short (self.channel_max))
            r.append (pack_long (self.frame_max))
            r.append (pack_short (self.heartbeat))
            return "".join (r)

    class open (object):
        _name = 'connection.open'
        id = (10, 40)
        __slots__ = ['virtual_host', 'capabilities', 'insist']

        def __init__ (self, virtual_host='/', capabilities='', insist=False):
            self.virtual_host = virtual_host
            self.capabilities = capabilities
            self.insist = insist

        def unpack (self, data, pos):
            self.virtual_host, pos = unpack_shortstr (data, pos)
            self.capabilities, pos = unpack_shortstr (data, pos)
            self.insist, pos = (ord(data[pos]) & (1 << 0)), pos
            pos += 1  # post-bit-octet advance

        def pack (self):
            r = []
            byte = 0
            r.append (pack_shortstr (self.virtual_host))
            r.append (pack_shortstr (self.capabilities))
            if self.insist:
                byte |= (1 << 0)
            r.append (chr (byte))
            return "".join (r)

    class open_ok (object):
        _name = 'connection.open_ok'
        id = (10, 41)
        __slots__ = ['known_hosts']

        def __init__ (self, known_hosts=''):
            self.known_hosts = known_hosts

        def unpack (self, data, pos):
            self.known_hosts, pos = unpack_shortstr (data, pos)

        def pack (self):
            r = []
            r.append (pack_shortstr (self.known_hosts))
            return "".join (r)

    class close (object):
        _name = 'connection.close'
        id = (10, 50)
        __slots__ = ['reply_code', 'reply_text', 'class_id', 'method_id']

        def __init__ (self, reply_code=None, reply_text='', class_id=None, method_id=None):
            self.reply_code = reply_code
            self.reply_text = reply_text
            self.class_id = class_id
            self.method_id = method_id

        def unpack (self, data, pos):
            self.reply_code, pos = unpack_short (data, pos)
            self.reply_text, pos = unpack_shortstr (data, pos)
            self.class_id, pos = unpack_short (data, pos)
            self.method_id, pos = unpack_short (data, pos)

        def pack (self):
            r = []
            r.append (pack_short (self.reply_code))
            r.append (pack_shortstr (self.reply_text))
            r.append (pack_short (self.class_id))
            r.append (pack_short (self.method_id))
            return "".join (r)

    class close_ok (object):
        _name = 'connection.close_ok'
        id = (10, 51)
        __slots__ = []

        def __init__ (self, ):
            pass

        def unpack (self, data, pos):
            pass

        def pack (self):
            r = []
            return "".join (r)

    class blocked (object):
        _name = 'connection.blocked'
        id = (10, 60)
        __slots__ = ['reason']

        def __init__ (self, reason=''):
            self.reason = reason

        def unpack (self, data, pos):
            self.reason, pos = unpack_shortstr (data, pos)

        def pack (self):
            r = []
            r.append (pack_shortstr (self.reason))
            return "".join (r)

    class unblocked (object):
        _name = 'connection.unblocked'
        id = (10, 61)
        __slots__ = []

        def __init__ (self, ):
            pass

        def unpack (self, data, pos):
            pass

        def pack (self):
            r = []
            return "".join (r)


method_map[(10, 10)] = connection.start
method_map[(10, 11)] = connection.start_ok
method_map[(10, 20)] = connection.secure
method_map[(10, 21)] = connection.secure_ok
method_map[(10, 30)] = connection.tune
method_map[(10, 31)] = connection.tune_ok
method_map[(10, 40)] = connection.open
method_map[(10, 41)] = connection.open_ok
method_map[(10, 50)] = connection.close
method_map[(10, 51)] = connection.close_ok
method_map[(10, 60)] = connection.blocked
method_map[(10, 61)] = connection.unblocked

class channel (object):
    class open (object):
        _name = 'channel.open'
        id = (20, 10)
        __slots__ = ['out_of_band']

        def __init__ (self, out_of_band=''):
            self.out_of_band = out_of_band

        def unpack (self, data, pos):
            self.out_of_band, pos = unpack_shortstr (data, pos)

        def pack (self):
            r = []
            r.append (pack_shortstr (self.out_of_band))
            return "".join (r)

    class open_ok (object):
        _name = 'channel.open_ok'
        id = (20, 11)
        __slots__ = ['channel_id']

        def __init__ (self, channel_id=''):
            self.channel_id = channel_id

        def unpack (self, data, pos):
            self.channel_id, pos = unpack_longstr (data, pos)

        def pack (self):
            r = []
            r.append (pack_longstr (self.channel_id))
            return "".join (r)

    class flow (object):
        _name = 'channel.flow'
        id = (20, 20)
        __slots__ = ['active']

        def __init__ (self, active=None):
            self.active = active

        def unpack (self, data, pos):
            self.active, pos = (ord(data[pos]) & (1 << 0)), pos
            pos += 1  # post-bit-octet advance

        def pack (self):
            r = []
            byte = 0
            if self.active:
                byte |= (1 << 0)
            r.append (chr (byte))
            return "".join (r)

    class flow_ok (object):
        _name = 'channel.flow_ok'
        id = (20, 21)
        __slots__ = ['active']

        def __init__ (self, active=None):
            self.active = active

        def unpack (self, data, pos):
            self.active, pos = (ord(data[pos]) & (1 << 0)), pos
            pos += 1  # post-bit-octet advance

        def pack (self):
            r = []
            byte = 0
            if self.active:
                byte |= (1 << 0)
            r.append (chr (byte))
            return "".join (r)

    class close (object):
        _name = 'channel.close'
        id = (20, 40)
        __slots__ = ['reply_code', 'reply_text', 'class_id', 'method_id']

        def __init__ (self, reply_code=None, reply_text='', class_id=None, method_id=None):
            self.reply_code = reply_code
            self.reply_text = reply_text
            self.class_id = class_id
            self.method_id = method_id

        def unpack (self, data, pos):
            self.reply_code, pos = unpack_short (data, pos)
            self.reply_text, pos = unpack_shortstr (data, pos)
            self.class_id, pos = unpack_short (data, pos)
            self.method_id, pos = unpack_short (data, pos)

        def pack (self):
            r = []
            r.append (pack_short (self.reply_code))
            r.append (pack_shortstr (self.reply_text))
            r.append (pack_short (self.class_id))
            r.append (pack_short (self.method_id))
            return "".join (r)

    class close_ok (object):
        _name = 'channel.close_ok'
        id = (20, 41)
        __slots__ = []

        def __init__ (self, ):
            pass

        def unpack (self, data, pos):
            pass

        def pack (self):
            r = []
            return "".join (r)


method_map[(20, 10)] = channel.open
method_map[(20, 11)] = channel.open_ok
method_map[(20, 20)] = channel.flow
method_map[(20, 21)] = channel.flow_ok
method_map[(20, 40)] = channel.close
method_map[(20, 41)] = channel.close_ok

class access (object):
    class request (object):
        _name = 'access.request'
        id = (30, 10)
        __slots__ = ['realm', 'exclusive', 'passive', 'active', 'write', 'read']

        def __init__ (self, realm='/data', exclusive=False, passive=True, active=True, write=True, read=True):
            self.realm = realm
            self.exclusive = exclusive
            self.passive = passive
            self.active = active
            self.write = write
            self.read = read

        def unpack (self, data, pos):
            self.realm, pos = unpack_shortstr (data, pos)
            self.exclusive, pos = (ord(data[pos]) & (1 << 0)), pos
            self.passive, pos = (ord(data[pos]) & (1 << 1)), pos
            self.active, pos = (ord(data[pos]) & (1 << 2)), pos
            self.write, pos = (ord(data[pos]) & (1 << 3)), pos
            self.read, pos = (ord(data[pos]) & (1 << 4)), pos
            pos += 1  # post-bit-octet advance

        def pack (self):
            r = []
            byte = 0
            r.append (pack_shortstr (self.realm))
            if self.exclusive:
                byte |= (1 << 0)
            if self.passive:
                byte |= (1 << 1)
            if self.active:
                byte |= (1 << 2)
            if self.write:
                byte |= (1 << 3)
            if self.read:
                byte |= (1 << 4)
            r.append (chr (byte))
            return "".join (r)

    class request_ok (object):
        _name = 'access.request_ok'
        id = (30, 11)
        __slots__ = ['ticket']

        def __init__ (self, ticket=1):
            self.ticket = ticket

        def unpack (self, data, pos):
            self.ticket, pos = unpack_short (data, pos)

        def pack (self):
            r = []
            r.append (pack_short (self.ticket))
            return "".join (r)


method_map[(30, 10)] = access.request
method_map[(30, 11)] = access.request_ok

class exchange (object):
    class declare (object):
        _name = 'exchange.declare'
        id = (40, 10)
        __slots__ = ['ticket', 'exchange', 'type', 'passive', 'durable', 'auto_delete', 'internal', 'nowait', 'arguments']

        def __init__ (self, ticket=0, exchange=None, type='direct', passive=False, durable=False, auto_delete=False, internal=False, nowait=False, arguments={}):
            self.ticket = ticket
            self.exchange = exchange
            self.type = type
            self.passive = passive
            self.durable = durable
            self.auto_delete = auto_delete
            self.internal = internal
            self.nowait = nowait
            self.arguments = arguments

        def unpack (self, data, pos):
            self.ticket, pos = unpack_short (data, pos)
            self.exchange, pos = unpack_shortstr (data, pos)
            self.type, pos = unpack_shortstr (data, pos)
            self.passive, pos = (ord(data[pos]) & (1 << 0)), pos
            self.durable, pos = (ord(data[pos]) & (1 << 1)), pos
            self.auto_delete, pos = (ord(data[pos]) & (1 << 2)), pos
            self.internal, pos = (ord(data[pos]) & (1 << 3)), pos
            self.nowait, pos = (ord(data[pos]) & (1 << 4)), pos
            pos += 1  # post-bit-octet advance
            self.arguments, pos = unpack_table (data, pos)

        def pack (self):
            r = []
            byte = 0
            r.append (pack_short (self.ticket))
            r.append (pack_shortstr (self.exchange))
            r.append (pack_shortstr (self.type))
            if self.passive:
                byte |= (1 << 0)
            if self.durable:
                byte |= (1 << 1)
            if self.auto_delete:
                byte |= (1 << 2)
            if self.internal:
                byte |= (1 << 3)
            if self.nowait:
                byte |= (1 << 4)
            r.append (chr (byte))
            byte = 0
            r.append (pack_table (self.arguments))
            return "".join (r)

    class declare_ok (object):
        _name = 'exchange.declare_ok'
        id = (40, 11)
        __slots__ = []

        def __init__ (self, ):
            pass

        def unpack (self, data, pos):
            pass

        def pack (self):
            r = []
            return "".join (r)

    class delete (object):
        _name = 'exchange.delete'
        id = (40, 20)
        __slots__ = ['ticket', 'exchange', 'if_unused', 'nowait']

        def __init__ (self, ticket=0, exchange=None, if_unused=False, nowait=False):
            self.ticket = ticket
            self.exchange = exchange
            self.if_unused = if_unused
            self.nowait = nowait

        def unpack (self, data, pos):
            self.ticket, pos = unpack_short (data, pos)
            self.exchange, pos = unpack_shortstr (data, pos)
            self.if_unused, pos = (ord(data[pos]) & (1 << 0)), pos
            self.nowait, pos = (ord(data[pos]) & (1 << 1)), pos
            pos += 1  # post-bit-octet advance

        def pack (self):
            r = []
            byte = 0
            r.append (pack_short (self.ticket))
            r.append (pack_shortstr (self.exchange))
            if self.if_unused:
                byte |= (1 << 0)
            if self.nowait:
                byte |= (1 << 1)
            r.append (chr (byte))
            return "".join (r)

    class delete_ok (object):
        _name = 'exchange.delete_ok'
        id = (40, 21)
        __slots__ = []

        def __init__ (self, ):
            pass

        def unpack (self, data, pos):
            pass

        def pack (self):
            r = []
            return "".join (r)

    class bind (object):
        _name = 'exchange.bind'
        id = (40, 30)
        __slots__ = ['ticket', 'destination', 'source', 'routing_key', 'nowait', 'arguments']

        def __init__ (self, ticket=0, destination=None, source=None, routing_key='', nowait=False, arguments={}):
            self.ticket = ticket
            self.destination = destination
            self.source = source
            self.routing_key = routing_key
            self.nowait = nowait
            self.arguments = arguments

        def unpack (self, data, pos):
            self.ticket, pos = unpack_short (data, pos)
            self.destination, pos = unpack_shortstr (data, pos)
            self.source, pos = unpack_shortstr (data, pos)
            self.routing_key, pos = unpack_shortstr (data, pos)
            self.nowait, pos = (ord(data[pos]) & (1 << 0)), pos
            pos += 1  # post-bit-octet advance
            self.arguments, pos = unpack_table (data, pos)

        def pack (self):
            r = []
            byte = 0
            r.append (pack_short (self.ticket))
            r.append (pack_shortstr (self.destination))
            r.append (pack_shortstr (self.source))
            r.append (pack_shortstr (self.routing_key))
            if self.nowait:
                byte |= (1 << 0)
            r.append (chr (byte))
            byte = 0
            r.append (pack_table (self.arguments))
            return "".join (r)

    class bind_ok (object):
        _name = 'exchange.bind_ok'
        id = (40, 31)
        __slots__ = []

        def __init__ (self, ):
            pass

        def unpack (self, data, pos):
            pass

        def pack (self):
            r = []
            return "".join (r)

    class unbind (object):
        _name = 'exchange.unbind'
        id = (40, 40)
        __slots__ = ['ticket', 'destination', 'source', 'routing_key', 'nowait', 'arguments']

        def __init__ (self, ticket=0, destination=None, source=None, routing_key='', nowait=False, arguments={}):
            self.ticket = ticket
            self.destination = destination
            self.source = source
            self.routing_key = routing_key
            self.nowait = nowait
            self.arguments = arguments

        def unpack (self, data, pos):
            self.ticket, pos = unpack_short (data, pos)
            self.destination, pos = unpack_shortstr (data, pos)
            self.source, pos = unpack_shortstr (data, pos)
            self.routing_key, pos = unpack_shortstr (data, pos)
            self.nowait, pos = (ord(data[pos]) & (1 << 0)), pos
            pos += 1  # post-bit-octet advance
            self.arguments, pos = unpack_table (data, pos)

        def pack (self):
            r = []
            byte = 0
            r.append (pack_short (self.ticket))
            r.append (pack_shortstr (self.destination))
            r.append (pack_shortstr (self.source))
            r.append (pack_shortstr (self.routing_key))
            if self.nowait:
                byte |= (1 << 0)
            r.append (chr (byte))
            byte = 0
            r.append (pack_table (self.arguments))
            return "".join (r)

    class unbind_ok (object):
        _name = 'exchange.unbind_ok'
        id = (40, 51)
        __slots__ = []

        def __init__ (self, ):
            pass

        def unpack (self, data, pos):
            pass

        def pack (self):
            r = []
            return "".join (r)


method_map[(40, 10)] = exchange.declare
method_map[(40, 11)] = exchange.declare_ok
method_map[(40, 20)] = exchange.delete
method_map[(40, 21)] = exchange.delete_ok
method_map[(40, 30)] = exchange.bind
method_map[(40, 31)] = exchange.bind_ok
method_map[(40, 40)] = exchange.unbind
method_map[(40, 51)] = exchange.unbind_ok

class queue (object):
    class declare (object):
        _name = 'queue.declare'
        id = (50, 10)
        __slots__ = ['ticket', 'queue', 'passive', 'durable', 'exclusive', 'auto_delete', 'nowait', 'arguments']

        def __init__ (self, ticket=0, queue='', passive=False, durable=False, exclusive=False, auto_delete=False, nowait=False, arguments={}):
            self.ticket = ticket
            self.queue = queue
            self.passive = passive
            self.durable = durable
            self.exclusive = exclusive
            self.auto_delete = auto_delete
            self.nowait = nowait
            self.arguments = arguments

        def unpack (self, data, pos):
            self.ticket, pos = unpack_short (data, pos)
            self.queue, pos = unpack_shortstr (data, pos)
            self.passive, pos = (ord(data[pos]) & (1 << 0)), pos
            self.durable, pos = (ord(data[pos]) & (1 << 1)), pos
            self.exclusive, pos = (ord(data[pos]) & (1 << 2)), pos
            self.auto_delete, pos = (ord(data[pos]) & (1 << 3)), pos
            self.nowait, pos = (ord(data[pos]) & (1 << 4)), pos
            pos += 1  # post-bit-octet advance
            self.arguments, pos = unpack_table (data, pos)

        def pack (self):
            r = []
            byte = 0
            r.append (pack_short (self.ticket))
            r.append (pack_shortstr (self.queue))
            if self.passive:
                byte |= (1 << 0)
            if self.durable:
                byte |= (1 << 1)
            if self.exclusive:
                byte |= (1 << 2)
            if self.auto_delete:
                byte |= (1 << 3)
            if self.nowait:
                byte |= (1 << 4)
            r.append (chr (byte))
            byte = 0
            r.append (pack_table (self.arguments))
            return "".join (r)

    class declare_ok (object):
        _name = 'queue.declare_ok'
        id = (50, 11)
        __slots__ = ['queue', 'message_count', 'consumer_count']

        def __init__ (self, queue=None, message_count=None, consumer_count=None):
            self.queue = queue
            self.message_count = message_count
            self.consumer_count = consumer_count

        def unpack (self, data, pos):
            self.queue, pos = unpack_shortstr (data, pos)
            self.message_count, pos = unpack_long (data, pos)
            self.consumer_count, pos = unpack_long (data, pos)

        def pack (self):
            r = []
            r.append (pack_shortstr (self.queue))
            r.append (pack_long (self.message_count))
            r.append (pack_long (self.consumer_count))
            return "".join (r)

    class bind (object):
        _name = 'queue.bind'
        id = (50, 20)
        __slots__ = ['ticket', 'queue', 'exchange', 'routing_key', 'nowait', 'arguments']

        def __init__ (self, ticket=0, queue='', exchange=None, routing_key='', nowait=False, arguments={}):
            self.ticket = ticket
            self.queue = queue
            self.exchange = exchange
            self.routing_key = routing_key
            self.nowait = nowait
            self.arguments = arguments

        def unpack (self, data, pos):
            self.ticket, pos = unpack_short (data, pos)
            self.queue, pos = unpack_shortstr (data, pos)
            self.exchange, pos = unpack_shortstr (data, pos)
            self.routing_key, pos = unpack_shortstr (data, pos)
            self.nowait, pos = (ord(data[pos]) & (1 << 0)), pos
            pos += 1  # post-bit-octet advance
            self.arguments, pos = unpack_table (data, pos)

        def pack (self):
            r = []
            byte = 0
            r.append (pack_short (self.ticket))
            r.append (pack_shortstr (self.queue))
            r.append (pack_shortstr (self.exchange))
            r.append (pack_shortstr (self.routing_key))
            if self.nowait:
                byte |= (1 << 0)
            r.append (chr (byte))
            byte = 0
            r.append (pack_table (self.arguments))
            return "".join (r)

    class bind_ok (object):
        _name = 'queue.bind_ok'
        id = (50, 21)
        __slots__ = []

        def __init__ (self, ):
            pass

        def unpack (self, data, pos):
            pass

        def pack (self):
            r = []
            return "".join (r)

    class purge (object):
        _name = 'queue.purge'
        id = (50, 30)
        __slots__ = ['ticket', 'queue', 'nowait']

        def __init__ (self, ticket=0, queue='', nowait=False):
            self.ticket = ticket
            self.queue = queue
            self.nowait = nowait

        def unpack (self, data, pos):
            self.ticket, pos = unpack_short (data, pos)
            self.queue, pos = unpack_shortstr (data, pos)
            self.nowait, pos = (ord(data[pos]) & (1 << 0)), pos
            pos += 1  # post-bit-octet advance

        def pack (self):
            r = []
            byte = 0
            r.append (pack_short (self.ticket))
            r.append (pack_shortstr (self.queue))
            if self.nowait:
                byte |= (1 << 0)
            r.append (chr (byte))
            return "".join (r)

    class purge_ok (object):
        _name = 'queue.purge_ok'
        id = (50, 31)
        __slots__ = ['message_count']

        def __init__ (self, message_count=None):
            self.message_count = message_count

        def unpack (self, data, pos):
            self.message_count, pos = unpack_long (data, pos)

        def pack (self):
            r = []
            r.append (pack_long (self.message_count))
            return "".join (r)

    class delete (object):
        _name = 'queue.delete'
        id = (50, 40)
        __slots__ = ['ticket', 'queue', 'if_unused', 'if_empty', 'nowait']

        def __init__ (self, ticket=0, queue='', if_unused=False, if_empty=False, nowait=False):
            self.ticket = ticket
            self.queue = queue
            self.if_unused = if_unused
            self.if_empty = if_empty
            self.nowait = nowait

        def unpack (self, data, pos):
            self.ticket, pos = unpack_short (data, pos)
            self.queue, pos = unpack_shortstr (data, pos)
            self.if_unused, pos = (ord(data[pos]) & (1 << 0)), pos
            self.if_empty, pos = (ord(data[pos]) & (1 << 1)), pos
            self.nowait, pos = (ord(data[pos]) & (1 << 2)), pos
            pos += 1  # post-bit-octet advance

        def pack (self):
            r = []
            byte = 0
            r.append (pack_short (self.ticket))
            r.append (pack_shortstr (self.queue))
            if self.if_unused:
                byte |= (1 << 0)
            if self.if_empty:
                byte |= (1 << 1)
            if self.nowait:
                byte |= (1 << 2)
            r.append (chr (byte))
            return "".join (r)

    class delete_ok (object):
        _name = 'queue.delete_ok'
        id = (50, 41)
        __slots__ = ['message_count']

        def __init__ (self, message_count=None):
            self.message_count = message_count

        def unpack (self, data, pos):
            self.message_count, pos = unpack_long (data, pos)

        def pack (self):
            r = []
            r.append (pack_long (self.message_count))
            return "".join (r)

    class unbind (object):
        _name = 'queue.unbind'
        id = (50, 50)
        __slots__ = ['ticket', 'queue', 'exchange', 'routing_key', 'arguments']

        def __init__ (self, ticket=0, queue='', exchange=None, routing_key='', arguments={}):
            self.ticket = ticket
            self.queue = queue
            self.exchange = exchange
            self.routing_key = routing_key
            self.arguments = arguments

        def unpack (self, data, pos):
            self.ticket, pos = unpack_short (data, pos)
            self.queue, pos = unpack_shortstr (data, pos)
            self.exchange, pos = unpack_shortstr (data, pos)
            self.routing_key, pos = unpack_shortstr (data, pos)
            self.arguments, pos = unpack_table (data, pos)

        def pack (self):
            r = []
            r.append (pack_short (self.ticket))
            r.append (pack_shortstr (self.queue))
            r.append (pack_shortstr (self.exchange))
            r.append (pack_shortstr (self.routing_key))
            r.append (pack_table (self.arguments))
            return "".join (r)

    class unbind_ok (object):
        _name = 'queue.unbind_ok'
        id = (50, 51)
        __slots__ = []

        def __init__ (self, ):
            pass

        def unpack (self, data, pos):
            pass

        def pack (self):
            r = []
            return "".join (r)


method_map[(50, 10)] = queue.declare
method_map[(50, 11)] = queue.declare_ok
method_map[(50, 20)] = queue.bind
method_map[(50, 21)] = queue.bind_ok
method_map[(50, 30)] = queue.purge
method_map[(50, 31)] = queue.purge_ok
method_map[(50, 40)] = queue.delete
method_map[(50, 41)] = queue.delete_ok
method_map[(50, 50)] = queue.unbind
method_map[(50, 51)] = queue.unbind_ok

class basic (object):
    class properties (object):
        bit_map = {
            15: "content-type",
            14: "content-encoding",
            13: "headers",
            12: "delivery-mode",
            11: "priority",
            10: "correlation-id",
            9: "reply-to",
            8: "expiration",
            7: "message-id",
            6: "timestamp",
            5: "type",
            4: "user-id",
            3: "app-id",
            2: "cluster-id",
        }
        name_map = {
            "content-type": (15, unpack_shortstr, pack_shortstr),
            "content-encoding": (14, unpack_shortstr, pack_shortstr),
            "headers": (13, unpack_table, pack_table),
            "delivery-mode": (12, unpack_octet, pack_octet),
            "priority": (11, unpack_octet, pack_octet),
            "correlation-id": (10, unpack_shortstr, pack_shortstr),
            "reply-to": (9, unpack_shortstr, pack_shortstr),
            "expiration": (8, unpack_shortstr, pack_shortstr),
            "message-id": (7, unpack_shortstr, pack_shortstr),
            "timestamp": (6, unpack_timestamp, pack_timestamp),
            "type": (5, unpack_shortstr, pack_shortstr),
            "user-id": (4, unpack_shortstr, pack_shortstr),
            "app-id": (3, unpack_shortstr, pack_shortstr),
            "cluster-id": (2, unpack_shortstr, pack_shortstr),
        }
        n_properties = 14

    class qos (object):
        _name = 'basic.qos'
        id = (60, 10)
        __slots__ = ['prefetch_size', 'prefetch_count', '_global']

        def __init__ (self, prefetch_size=0, prefetch_count=0, _global=False):
            self.prefetch_size = prefetch_size
            self.prefetch_count = prefetch_count
            self._global = _global

        def unpack (self, data, pos):
            self.prefetch_size, pos = unpack_long (data, pos)
            self.prefetch_count, pos = unpack_short (data, pos)
            self._global, pos = (ord(data[pos]) & (1 << 0)), pos
            pos += 1  # post-bit-octet advance

        def pack (self):
            r = []
            byte = 0
            r.append (pack_long (self.prefetch_size))
            r.append (pack_short (self.prefetch_count))
            if self._global:
                byte |= (1 << 0)
            r.append (chr (byte))
            return "".join (r)

    class qos_ok (object):
        _name = 'basic.qos_ok'
        id = (60, 11)
        __slots__ = []

        def __init__ (self, ):
            pass

        def unpack (self, data, pos):
            pass

        def pack (self):
            r = []
            return "".join (r)

    class consume (object):
        _name = 'basic.consume'
        id = (60, 20)
        __slots__ = ['ticket', 'queue', 'consumer_tag', 'no_local', 'no_ack', 'exclusive', 'nowait', 'arguments']

        def __init__ (self, ticket=0, queue='', consumer_tag='', no_local=False, no_ack=False, exclusive=False, nowait=False, arguments={}):
            self.ticket = ticket
            self.queue = queue
            self.consumer_tag = consumer_tag
            self.no_local = no_local
            self.no_ack = no_ack
            self.exclusive = exclusive
            self.nowait = nowait
            self.arguments = arguments

        def unpack (self, data, pos):
            self.ticket, pos = unpack_short (data, pos)
            self.queue, pos = unpack_shortstr (data, pos)
            self.consumer_tag, pos = unpack_shortstr (data, pos)
            self.no_local, pos = (ord(data[pos]) & (1 << 0)), pos
            self.no_ack, pos = (ord(data[pos]) & (1 << 1)), pos
            self.exclusive, pos = (ord(data[pos]) & (1 << 2)), pos
            self.nowait, pos = (ord(data[pos]) & (1 << 3)), pos
            pos += 1  # post-bit-octet advance
            self.arguments, pos = unpack_table (data, pos)

        def pack (self):
            r = []
            byte = 0
            r.append (pack_short (self.ticket))
            r.append (pack_shortstr (self.queue))
            r.append (pack_shortstr (self.consumer_tag))
            if self.no_local:
                byte |= (1 << 0)
            if self.no_ack:
                byte |= (1 << 1)
            if self.exclusive:
                byte |= (1 << 2)
            if self.nowait:
                byte |= (1 << 3)
            r.append (chr (byte))
            byte = 0
            r.append (pack_table (self.arguments))
            return "".join (r)

    class consume_ok (object):
        _name = 'basic.consume_ok'
        id = (60, 21)
        __slots__ = ['consumer_tag']

        def __init__ (self, consumer_tag=None):
            self.consumer_tag = consumer_tag

        def unpack (self, data, pos):
            self.consumer_tag, pos = unpack_shortstr (data, pos)

        def pack (self):
            r = []
            r.append (pack_shortstr (self.consumer_tag))
            return "".join (r)

    class cancel (object):
        _name = 'basic.cancel'
        id = (60, 30)
        __slots__ = ['consumer_tag', 'nowait']

        def __init__ (self, consumer_tag=None, nowait=False):
            self.consumer_tag = consumer_tag
            self.nowait = nowait

        def unpack (self, data, pos):
            self.consumer_tag, pos = unpack_shortstr (data, pos)
            self.nowait, pos = (ord(data[pos]) & (1 << 0)), pos
            pos += 1  # post-bit-octet advance

        def pack (self):
            r = []
            byte = 0
            r.append (pack_shortstr (self.consumer_tag))
            if self.nowait:
                byte |= (1 << 0)
            r.append (chr (byte))
            return "".join (r)

    class cancel_ok (object):
        _name = 'basic.cancel_ok'
        id = (60, 31)
        __slots__ = ['consumer_tag']

        def __init__ (self, consumer_tag=None):
            self.consumer_tag = consumer_tag

        def unpack (self, data, pos):
            self.consumer_tag, pos = unpack_shortstr (data, pos)

        def pack (self):
            r = []
            r.append (pack_shortstr (self.consumer_tag))
            return "".join (r)

    class publish (object):
        _name = 'basic.publish'
        id = (60, 40)
        __slots__ = ['ticket', 'exchange', 'routing_key', 'mandatory', 'immediate']

        def __init__ (self, ticket=0, exchange='', routing_key='', mandatory=False, immediate=False):
            self.ticket = ticket
            self.exchange = exchange
            self.routing_key = routing_key
            self.mandatory = mandatory
            self.immediate = immediate

        def unpack (self, data, pos):
            self.ticket, pos = unpack_short (data, pos)
            self.exchange, pos = unpack_shortstr (data, pos)
            self.routing_key, pos = unpack_shortstr (data, pos)
            self.mandatory, pos = (ord(data[pos]) & (1 << 0)), pos
            self.immediate, pos = (ord(data[pos]) & (1 << 1)), pos
            pos += 1  # post-bit-octet advance

        def pack (self):
            r = []
            byte = 0
            r.append (pack_short (self.ticket))
            r.append (pack_shortstr (self.exchange))
            r.append (pack_shortstr (self.routing_key))
            if self.mandatory:
                byte |= (1 << 0)
            if self.immediate:
                byte |= (1 << 1)
            r.append (chr (byte))
            return "".join (r)

    class _return (object):
        _name = 'basic._return'
        id = (60, 50)
        __slots__ = ['reply_code', 'reply_text', 'exchange', 'routing_key']

        def __init__ (self, reply_code=None, reply_text='', exchange=None, routing_key=None):
            self.reply_code = reply_code
            self.reply_text = reply_text
            self.exchange = exchange
            self.routing_key = routing_key

        def unpack (self, data, pos):
            self.reply_code, pos = unpack_short (data, pos)
            self.reply_text, pos = unpack_shortstr (data, pos)
            self.exchange, pos = unpack_shortstr (data, pos)
            self.routing_key, pos = unpack_shortstr (data, pos)

        def pack (self):
            r = []
            r.append (pack_short (self.reply_code))
            r.append (pack_shortstr (self.reply_text))
            r.append (pack_shortstr (self.exchange))
            r.append (pack_shortstr (self.routing_key))
            return "".join (r)

    class deliver (object):
        _name = 'basic.deliver'
        id = (60, 60)
        __slots__ = ['consumer_tag', 'delivery_tag', 'redelivered', 'exchange', 'routing_key']

        def __init__ (self, consumer_tag=None, delivery_tag=None, redelivered=False, exchange=None, routing_key=None):
            self.consumer_tag = consumer_tag
            self.delivery_tag = delivery_tag
            self.redelivered = redelivered
            self.exchange = exchange
            self.routing_key = routing_key

        def unpack (self, data, pos):
            self.consumer_tag, pos = unpack_shortstr (data, pos)
            self.delivery_tag, pos = unpack_longlong (data, pos)
            self.redelivered, pos = (ord(data[pos]) & (1 << 0)), pos
            pos += 1  # post-bit-octet advance
            self.exchange, pos = unpack_shortstr (data, pos)
            self.routing_key, pos = unpack_shortstr (data, pos)

        def pack (self):
            r = []
            byte = 0
            r.append (pack_shortstr (self.consumer_tag))
            r.append (pack_longlong (self.delivery_tag))
            if self.redelivered:
                byte |= (1 << 0)
            r.append (chr (byte))
            byte = 0
            r.append (pack_shortstr (self.exchange))
            r.append (pack_shortstr (self.routing_key))
            return "".join (r)

    class get (object):
        _name = 'basic.get'
        id = (60, 70)
        __slots__ = ['ticket', 'queue', 'no_ack']

        def __init__ (self, ticket=0, queue='', no_ack=False):
            self.ticket = ticket
            self.queue = queue
            self.no_ack = no_ack

        def unpack (self, data, pos):
            self.ticket, pos = unpack_short (data, pos)
            self.queue, pos = unpack_shortstr (data, pos)
            self.no_ack, pos = (ord(data[pos]) & (1 << 0)), pos
            pos += 1  # post-bit-octet advance

        def pack (self):
            r = []
            byte = 0
            r.append (pack_short (self.ticket))
            r.append (pack_shortstr (self.queue))
            if self.no_ack:
                byte |= (1 << 0)
            r.append (chr (byte))
            return "".join (r)

    class get_ok (object):
        _name = 'basic.get_ok'
        id = (60, 71)
        __slots__ = ['delivery_tag', 'redelivered', 'exchange', 'routing_key', 'message_count']

        def __init__ (self, delivery_tag=None, redelivered=False, exchange=None, routing_key=None, message_count=None):
            self.delivery_tag = delivery_tag
            self.redelivered = redelivered
            self.exchange = exchange
            self.routing_key = routing_key
            self.message_count = message_count

        def unpack (self, data, pos):
            self.delivery_tag, pos = unpack_longlong (data, pos)
            self.redelivered, pos = (ord(data[pos]) & (1 << 0)), pos
            pos += 1  # post-bit-octet advance
            self.exchange, pos = unpack_shortstr (data, pos)
            self.routing_key, pos = unpack_shortstr (data, pos)
            self.message_count, pos = unpack_long (data, pos)

        def pack (self):
            r = []
            byte = 0
            r.append (pack_longlong (self.delivery_tag))
            if self.redelivered:
                byte |= (1 << 0)
            r.append (chr (byte))
            byte = 0
            r.append (pack_shortstr (self.exchange))
            r.append (pack_shortstr (self.routing_key))
            r.append (pack_long (self.message_count))
            return "".join (r)

    class get_empty (object):
        _name = 'basic.get_empty'
        id = (60, 72)
        __slots__ = ['cluster_id']

        def __init__ (self, cluster_id=''):
            self.cluster_id = cluster_id

        def unpack (self, data, pos):
            self.cluster_id, pos = unpack_shortstr (data, pos)

        def pack (self):
            r = []
            r.append (pack_shortstr (self.cluster_id))
            return "".join (r)

    class ack (object):
        _name = 'basic.ack'
        id = (60, 80)
        __slots__ = ['delivery_tag', 'multiple']

        def __init__ (self, delivery_tag=0, multiple=False):
            self.delivery_tag = delivery_tag
            self.multiple = multiple

        def unpack (self, data, pos):
            self.delivery_tag, pos = unpack_longlong (data, pos)
            self.multiple, pos = (ord(data[pos]) & (1 << 0)), pos
            pos += 1  # post-bit-octet advance

        def pack (self):
            r = []
            byte = 0
            r.append (pack_longlong (self.delivery_tag))
            if self.multiple:
                byte |= (1 << 0)
            r.append (chr (byte))
            return "".join (r)

    class reject (object):
        _name = 'basic.reject'
        id = (60, 90)
        __slots__ = ['delivery_tag', 'requeue']

        def __init__ (self, delivery_tag=None, requeue=True):
            self.delivery_tag = delivery_tag
            self.requeue = requeue

        def unpack (self, data, pos):
            self.delivery_tag, pos = unpack_longlong (data, pos)
            self.requeue, pos = (ord(data[pos]) & (1 << 0)), pos
            pos += 1  # post-bit-octet advance

        def pack (self):
            r = []
            byte = 0
            r.append (pack_longlong (self.delivery_tag))
            if self.requeue:
                byte |= (1 << 0)
            r.append (chr (byte))
            return "".join (r)

    class recover_async (object):
        _name = 'basic.recover_async'
        id = (60, 100)
        __slots__ = ['requeue']

        def __init__ (self, requeue=False):
            self.requeue = requeue

        def unpack (self, data, pos):
            self.requeue, pos = (ord(data[pos]) & (1 << 0)), pos
            pos += 1  # post-bit-octet advance

        def pack (self):
            r = []
            byte = 0
            if self.requeue:
                byte |= (1 << 0)
            r.append (chr (byte))
            return "".join (r)

    class recover (object):
        _name = 'basic.recover'
        id = (60, 110)
        __slots__ = ['requeue']

        def __init__ (self, requeue=False):
            self.requeue = requeue

        def unpack (self, data, pos):
            self.requeue, pos = (ord(data[pos]) & (1 << 0)), pos
            pos += 1  # post-bit-octet advance

        def pack (self):
            r = []
            byte = 0
            if self.requeue:
                byte |= (1 << 0)
            r.append (chr (byte))
            return "".join (r)

    class recover_ok (object):
        _name = 'basic.recover_ok'
        id = (60, 111)
        __slots__ = []

        def __init__ (self, ):
            pass

        def unpack (self, data, pos):
            pass

        def pack (self):
            r = []
            return "".join (r)

    class nack (object):
        _name = 'basic.nack'
        id = (60, 120)
        __slots__ = ['delivery_tag', 'multiple', 'requeue']

        def __init__ (self, delivery_tag=0, multiple=False, requeue=True):
            self.delivery_tag = delivery_tag
            self.multiple = multiple
            self.requeue = requeue

        def unpack (self, data, pos):
            self.delivery_tag, pos = unpack_longlong (data, pos)
            self.multiple, pos = (ord(data[pos]) & (1 << 0)), pos
            self.requeue, pos = (ord(data[pos]) & (1 << 1)), pos
            pos += 1  # post-bit-octet advance

        def pack (self):
            r = []
            byte = 0
            r.append (pack_longlong (self.delivery_tag))
            if self.multiple:
                byte |= (1 << 0)
            if self.requeue:
                byte |= (1 << 1)
            r.append (chr (byte))
            return "".join (r)


method_map[(60, 10)] = basic.qos
method_map[(60, 11)] = basic.qos_ok
method_map[(60, 20)] = basic.consume
method_map[(60, 21)] = basic.consume_ok
method_map[(60, 30)] = basic.cancel
method_map[(60, 31)] = basic.cancel_ok
method_map[(60, 40)] = basic.publish
method_map[(60, 50)] = basic._return
method_map[(60, 60)] = basic.deliver
method_map[(60, 70)] = basic.get
method_map[(60, 71)] = basic.get_ok
method_map[(60, 72)] = basic.get_empty
method_map[(60, 80)] = basic.ack
method_map[(60, 90)] = basic.reject
method_map[(60, 100)] = basic.recover_async
method_map[(60, 110)] = basic.recover
method_map[(60, 111)] = basic.recover_ok
method_map[(60, 120)] = basic.nack

class tx (object):
    class select (object):
        _name = 'tx.select'
        id = (90, 10)
        __slots__ = []

        def __init__ (self, ):
            pass

        def unpack (self, data, pos):
            pass

        def pack (self):
            r = []
            return "".join (r)

    class select_ok (object):
        _name = 'tx.select_ok'
        id = (90, 11)
        __slots__ = []

        def __init__ (self, ):
            pass

        def unpack (self, data, pos):
            pass

        def pack (self):
            r = []
            return "".join (r)

    class commit (object):
        _name = 'tx.commit'
        id = (90, 20)
        __slots__ = []

        def __init__ (self, ):
            pass

        def unpack (self, data, pos):
            pass

        def pack (self):
            r = []
            return "".join (r)

    class commit_ok (object):
        _name = 'tx.commit_ok'
        id = (90, 21)
        __slots__ = []

        def __init__ (self, ):
            pass

        def unpack (self, data, pos):
            pass

        def pack (self):
            r = []
            return "".join (r)

    class rollback (object):
        _name = 'tx.rollback'
        id = (90, 30)
        __slots__ = []

        def __init__ (self, ):
            pass

        def unpack (self, data, pos):
            pass

        def pack (self):
            r = []
            return "".join (r)

    class rollback_ok (object):
        _name = 'tx.rollback_ok'
        id = (90, 31)
        __slots__ = []

        def __init__ (self, ):
            pass

        def unpack (self, data, pos):
            pass

        def pack (self):
            r = []
            return "".join (r)


method_map[(90, 10)] = tx.select
method_map[(90, 11)] = tx.select_ok
method_map[(90, 20)] = tx.commit
method_map[(90, 21)] = tx.commit_ok
method_map[(90, 30)] = tx.rollback
method_map[(90, 31)] = tx.rollback_ok

class confirm (object):
    class select (object):
        _name = 'confirm.select'
        id = (85, 10)
        __slots__ = ['nowait']

        def __init__ (self, nowait=False):
            self.nowait = nowait

        def unpack (self, data, pos):
            self.nowait, pos = (ord(data[pos]) & (1 << 0)), pos
            pos += 1  # post-bit-octet advance

        def pack (self):
            r = []
            byte = 0
            if self.nowait:
                byte |= (1 << 0)
            r.append (chr (byte))
            return "".join (r)

    class select_ok (object):
        _name = 'confirm.select_ok'
        id = (85, 11)
        __slots__ = []

        def __init__ (self, ):
            pass

        def unpack (self, data, pos):
            pass

        def pack (self):
            r = []
            return "".join (r)


method_map[(85, 10)] = confirm.select
method_map[(85, 11)] = confirm.select_ok
